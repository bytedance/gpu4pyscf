# Copyright 2021-2024 The PySCF Developers. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import unittest
import numpy as np
import pyscf
from gpu4pyscf.dft import rks

def setUpModule():
    global mol

    atom = '''
    O  0.0000  0.7375 -0.0528
    O  0.0000 -0.7375 -0.1528
    H  0.8190  0.8170  0.4220
    H -0.8190 -0.8170  1.4220
    '''
    basis = 'def2-svp'

    mol = pyscf.M(atom=atom, basis=basis, max_memory=32000,
                  output='/dev/null', verbose=1)

def tearDownModule():
    global mol
    mol.stdout.close()
    del mol

def make_mf(mol, vv10_only = False):
    if not vv10_only:
        mf = rks.RKS(mol, xc = "wb97x-v")
        mf.grids.level = 5
    else:
        mf = rks.RKS(mol, xc = "0*PBE,0*PBE")
        mf.nlc = "vv10"
        mf.grids.atom_grid = (3,6)
    mf.conv_tol = 1e-16
    mf.direct_scf_tol = 1e-16
    mf.nlcgrids.atom_grid = (75,302)
    mf.conv_tol_cpscf = 1e-10
    mf.kernel()
    return mf

def numerical_d2enlc(mf):
    mol = mf.mol

    numerical_hessian = np.zeros([mol.natm, mol.natm, 3, 3])

    dx = 1e-3
    mol_copy = mol.copy()
    mf_copy = mf.copy()
    for i_atom in range(mol.natm):
        for i_xyz in range(3):
            xyz_p = mol.atom_coords()
            xyz_p[i_atom, i_xyz] += dx
            mol_copy.set_geom_(xyz_p, unit='Bohr')
            mol_copy.build()
            mf_copy.reset(mol_copy)
            mf_copy.kernel()
            assert mf_copy.converged
            grad_obj = mf_copy.Gradients()
            grad_obj.grid_response = True
            gradient_p = grad_obj.kernel()

            xyz_m = mol.atom_coords()
            xyz_m[i_atom, i_xyz] -= dx
            mol_copy.set_geom_(xyz_m, unit='Bohr')
            mol_copy.build()
            mf_copy.reset(mol_copy)
            mf_copy.kernel()
            assert mf_copy.converged
            grad_obj = mf_copy.Gradients()
            grad_obj.grid_response = True
            gradient_m = grad_obj.kernel()

            numerical_hessian[i_atom, :, i_xyz, :] = (gradient_p - gradient_m) / (2 * dx)

    np.set_printoptions(linewidth = np.iinfo(np.int32).max, threshold = np.iinfo(np.int32).max, precision = 16, suppress = True)
    print(repr(numerical_hessian))
    return numerical_hessian

def analytical_d2enlc(mf):
    hess_obj = mf.Hessian()
    hess_obj.auxbasis_response = 2
    analytical_hessian = hess_obj.kernel()
    return analytical_hessian

class KnownValues(unittest.TestCase):
    def test_vv10_only_hessian_direct(self):
        mf = make_mf(mol, vv10_only = True)

        # reference_hessian = numerical_d2enlc(mf)
        reference_hessian = np.array([[[[ 0.5416385094555443,  0.0608587976822506,  0.4059780361467813],
         [ 0.0608583153386411,  0.2400708605971857,  0.0171074122129466],
         [ 0.4059767934618819,  0.0171075175856572,  0.0715012127059378]],

        [[ 0.0138411261745644, -0.0307587099088735, -0.0114409966949225],
         [-0.0046670364924131, -0.3662177810292988, -0.0328075691992114],
         [-0.0077329455397644, -0.0418507928570122,  0.0212319435189956]],

        [[-0.5632752360931192, -0.0127530395704345, -0.4031497682549512],
         [-0.0421637920360318,  0.1460901948911464, -0.0167164189056601],
         [-0.4027394645520488, -0.0044779744087786, -0.0910390554401674]],

        [[ 0.0077956004770896, -0.0173470482155158,  0.008612728790991 ],
         [-0.0140274868233869, -0.0199432745474626,  0.0324165758873729],
         [ 0.004495616644451 ,  0.02922124965829  , -0.0016941007819904]]],


       [[[ 0.0138412926078413, -0.0046674378371137, -0.007733128939813 ],
         [-0.0307585783373421, -0.3662178497929602, -0.0418510083978196],
         [-0.0114406839240022, -0.0328073191777634,  0.0212322387688757]],

        [[-0.0265688329405926,  0.0280390994733537,  0.0028061508691168],
         [ 0.0280390210395422,  0.4299653153587712,  0.0711125396311019],
         [ 0.0028060484083409,  0.0711122337611059, -0.0189041069124096]],

        [[ 0.0215131863576801, -0.0311007717287426,  0.0034433470949002],
         [-0.0042374598432371, -0.0574409077624405, -0.0113070426581707],
         [ 0.0060660526035594, -0.0238224669175113,  0.0092249375318598]],

        [[-0.0087856460534996,  0.0077291100670229,  0.0014836309728539],
         [ 0.0069570171381539, -0.0063065579256061, -0.017954488580163 ],
         [ 0.0025685829361799, -0.0144824477082139, -0.0115530693778898]]],


       [[[-0.5632753518693967, -0.0421644346566552, -0.402739948897668 ],
         [-0.0127529019099404,  0.1460905464591988, -0.0044775873883074],
         [-0.4031484872100144, -0.0167171608183025, -0.091038376287822 ]],

        [[ 0.0215132045501172, -0.0042371650881279,  0.0060659394314211],
         [-0.0311010481525466, -0.0574412135865288, -0.0238223321953335],
         [ 0.0034430790948267, -0.0113066360620806,  0.0092245405951541]],

        [[ 0.5449169029909662,  0.0467555396718167,  0.3963758752382196],
         [ 0.046755349856431 , -0.0877756999153601,  0.0269887824478898],
         [ 0.396375146332506 ,  0.0269891017112278,  0.0821096295715584]],

        [[-0.0031547556844091, -0.000353939952541 ,  0.0002981342411279],
         [-0.0029013998091298, -0.0008736328979408,  0.0013111371459651],
         [ 0.0033302617750142,  0.0010346951694329, -0.0002957938823878]]],


       [[[ 0.0077954733069818, -0.0140276105691228,  0.0044955368216359],
         [-0.0173472062745539, -0.0199430947489532,  0.0292210259493775],
         [ 0.0086125911367141,  0.0324162169498265, -0.0016944729875901]],

        [[-0.0087853560465749,  0.0069573606920059,  0.0025681631434793],
         [ 0.0077291657290882, -0.0063068020379475, -0.0144823954941753],
         [ 0.0014838511660648, -0.017954068078474 , -0.011553030224154 ]],

        [[-0.0031549510246531, -0.0029016744511612,  0.0033300169713923],
         [-0.0003539166857358, -0.0008736721611724,  0.0010348932112381],
         [ 0.0002979025925942,  0.0013112596001785, -0.0002961460349171]],

        [[ 0.0041448337520511,  0.009971924351676 , -0.0103937169317336],
         [ 0.0099719572323465,  0.027123568895393 , -0.0157735236657186],
         [-0.0103943449092925, -0.015773408461317 ,  0.013543649255765 ]]]])

        test_hessian = analytical_d2enlc(mf)

        assert np.linalg.norm(test_hessian - reference_hessian) < 1e-5

    def test_vv10_only_hessian_density_fitting(self):
        mf = make_mf(mol, vv10_only = True)
        mf = mf.density_fit(auxbasis = "def2-universal-jkfit")

        # reference_hessian = numerical_d2enlc(mf)
        reference_hessian = np.array([[[[ 0.5415690975546505,  0.0608565893847057,  0.4059123684144184],
         [ 0.0608567179470887,  0.240078942149502 ,  0.0171123303392418],
         [ 0.4059116777022087,  0.0171139525644293,  0.07146122373064  ]],

        [[ 0.013823732574976 , -0.0307649266062526, -0.0114440924754433],
         [-0.0046679030080918, -0.3662416900880316, -0.0328126245595639],
         [-0.0077380049202866, -0.0418737335827757,  0.0212218102725314]],

        [[-0.5631976160955787, -0.0127426333714209, -0.4030855294625546],
         [-0.0421535795174233,  0.1461101738648996, -0.0167197884154424],
         [-0.4026862971659995, -0.004478735401714 , -0.0909792927936692]],

        [[ 0.007804785955412 , -0.0173490294067824,  0.0086172535191942],
         [-0.0140352354270901, -0.0199474259794663,  0.0324200826377075],
         [ 0.0045126243833904,  0.0292385164210318, -0.0017037412157195]]],


       [[[ 0.0138235822527699, -0.0046686249861594, -0.0077379962926116],
         [-0.0307655564190101, -0.3662413748415361, -0.0418723976293722],
         [-0.0114436450876498, -0.0328133594376112,  0.021221780506453 ]],

        [[-0.026554070379152 ,  0.0280358942026382,  0.0028004285842487],
         [ 0.0280356430925263,  0.4300052647483454,  0.0711167061018259],
         [ 0.0028005648342565,  0.0711173736185344, -0.0188840361019516]],

        [[ 0.0215198499740055, -0.0311001343976103,  0.0034520141675154],
         [-0.0042300838603015, -0.0574484319667001, -0.0112938770964188],
         [ 0.0060715686840407, -0.0238196323006368,  0.0092247704940318]],

        [[-0.0087893618466173,  0.0077328651925668,  0.0014855535389602],
         [ 0.0069599971928569, -0.0063154579889591, -0.0179504313745915],
         [ 0.0025715115709035, -0.0144843818751517, -0.0115625148924825]]],


       [[[-0.5631977421522993, -0.04215441246469  , -0.4026869056427129],
         [-0.0127427083143061,  0.146110189936266 , -0.0044785767174815],
         [-0.4030850645485584, -0.0167209757702125, -0.0909799839081682]],

        [[ 0.0215198611255712, -0.0042298010818342,  0.0060714945682161],
         [-0.0311002267698174, -0.0574484405770903, -0.0238197694054643],
         [ 0.0034521639997558, -0.0112930958913182,  0.009225237922017 ]],

        [[ 0.5448431673429344,  0.0467450127398794,  0.3963154929421675],
         [ 0.0467448957437444, -0.0877855990506493,  0.026984759021631 ],
         [ 0.3963152541353043,  0.0269848641609172,  0.082049399716122 ]],

        [[-0.0031652863059506, -0.00036079919008  ,  0.0002999181374919],
         [-0.0029019606577751, -0.0008761503142163,  0.0013135871035908],
         [ 0.0033176464125928,  0.0010292074989482, -0.0002946537255299]]],


       [[[ 0.0078053640046871, -0.0140352634367957,  0.0045121161945105],
         [-0.0173491491187727, -0.0199464339409872,  0.0292384013485525],
         [ 0.0086167560621186,  0.0324199102985645, -0.00170314021819  ]],

        [[-0.0087887410633695,  0.0069602554733095,  0.0025713648724723],
         [ 0.0077326389630213, -0.0063164574122254, -0.014483935142362 ],
         [ 0.001485279075196 , -0.0179500966872581, -0.0115631306208952]],

        [[-0.0031654524690339, -0.0029019331240221,  0.0033183810366211],
         [-0.0003608124119481, -0.0008763719678839,  0.0010294581459513],
         [ 0.0002999642410018,  0.0013136101198463, -0.0002947784875085]],

        [[ 0.0041488295299819,  0.0099769410861761, -0.0104018621031043],
         [ 0.0099773225685218,  0.0271392633186263, -0.0157839243541957],
         [-0.0104019993785176, -0.0157834237279053,  0.0135610493245397]]]])

        test_hessian = analytical_d2enlc(mf)

        assert np.linalg.norm(test_hessian - reference_hessian) < 2e-4

    # # TODO: Supress the diff between analytical and numerical hessian below 1e-3
    # def test_wb97xv_hessian_loose_grid(self):
    #     mf = make_mf(mol, nlc_atom_grid_loose, vv10_only = False)

    #     reference_hessian = numerical_d2enlc(mf)

    #     test_hessian = analytical_d2enlc(mf)

    #     assert np.linalg.norm(test_hessian - reference_hessian) < 1e-15

if __name__ == "__main__":
    print("Full Tests for RKS Hessian with VV10")
    unittest.main()
